name: Build bzImage Kernel

on:
  push:
    branches: [ master ]
  pull_request:
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0
    
    - name: Install dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo apt update
        sudo apt install -y \
          gcc-10 g++-10 gcc-10-multilib g++-10-multilib \
          binutils binutils-i686-linux-gnu \
          bc bison flex libssl-dev libelf-dev dwarves \
          build-essential libncurses-dev \
          cmake git libdw-dev libdwarf-dev zlib1g-dev libiberty-dev

    - name: Build and install pahole v1.22
      run: |
        git clone https://git.kernel.org/pub/scm/devel/pahole/pahole.git -b v1.22
        cd pahole
        mkdir build && cd build
        cmake .. \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_INSTALL_LIBDIR=lib \
          -DEXEC_INSTALL_PREFIX= \
          -D__LIB=lib
        make -j$(nproc)
        sudo make install
        echo "/usr/local/lib" | sudo tee /etc/ld.so.conf.d/dwarves.conf
        sudo ldconfig
        echo "LD_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
        pahole --version

    - name: Set GCC and LD versions
      run: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100
        echo "GCC Version:"
        gcc --version
        echo "LD Version:"
        ld --version

    - name: Clone kernel source
      run: |
        wget https://www.kernel.org/pub/linux/kernel/v5.x/linux-5.10.tar.xz
        tar xvf linux-5.10.tar.xz
        mv linux-5.10 kernel
        cd kernel
        cp $GITHUB_WORKSPACE/patch/elf.patch .
        patch -p0 < elf.patch
        
        echo "" > .scmversion

    - name: Use x86_64_defconfig
      working-directory: kernel
      run: |
        make x86_64_defconfig
        
        # 文件系统配置
        scripts/config --module CONFIG_FAT_FS
        scripts/config --module CONFIG_VFAT_FS
        scripts/config --module CONFIG_EXFAT_FS
        scripts/config --module CONFIG_MSDOS_FS
        scripts/config --module CONFIG_NLS_CODEPAGE_437
        scripts/config --module CONFIG_NLS_UTF8
        scripts/config --module CONFIG_NLS_CODEPAGE_936
        
        # SCSI/SAS 配置
        scripts/config --module CONFIG_BLK_DEV_SD
        scripts/config --module CONFIG_CHR_DEV_SG
        scripts/config --module CONFIG_SCSI_SAS_ATTRS
        scripts/config --module CONFIG_BLK_DEV_INTEGRITY
        scripts/config --module CONFIG_RAID_ATTRS
        scripts/config --enable CONFIG_IRQ_POLL
        scripts/config --module CONFIG_SCSI_MPT3SAS
        
        # USB 配置
        scripts/config --enable CONFIG_USB             # 基础USB支持
        scripts/config --enable CONFIG_USB_SUPPORT     # USB核心支持
        scripts/config --module CONFIG_USB_STORAGE
        scripts/config --module CONFIG_USB_UAS
        scripts/config --module CONFIG_USB_SERIAL      # USB串行核心
        scripts/config --module CONFIG_USB_SERIAL_PL2303
        scripts/config --module CONFIG_USB_SERIAL_CH341
        scripts/config --module CONFIG_USB_SERIAL_CH9344
        scripts/config --module CONFIG_USB_SERIAL_CP210X
        scripts/config --module CONFIG_USB_SERIAL_FTDI_SIO

        scripts/config --enable CONFIG_BLK_DEV_INTEGRITY  # 为T10-PI
        
        make olddefconfig

    - name: Build kernel and bzImage
      working-directory: kernel
      run: |
        make -j$(nproc) 
        make -j$(nproc) bzImage
        
    # 新增模块收集和打包步骤
    - name: Collect specific modules
      working-directory: kernel
      run: |
        mkdir -p ../modules
        modules=(
          nls_cp437.ko nls_cp936.ko nls_utf8.ko
          fat.ko vfat.ko msdos.ko exfat.ko
          t10-pi.ko raid_class.ko scsi_transport_sas.ko
          sd_mod.ko sg.ko usb-storage.ko uas.ko
          mpt3sas.ko usbserial.ko pl2303.ko
          ch341.ko ch9344.ko cp210x.ko ftdi_sio.ko
        )
        for mod in "${modules[@]}"; do
          find . -name "$mod" -exec cp --parents {} ../modules \;
        done

    - name: Package modules
      run: |
        tar -czvf kernel-modules.tar.gz -C modules .
        ls -lh kernel-modules.tar.gz

    # 上传所有产物
    - name: Upload bzImage
      uses: actions/upload-artifact@v4
      with:
        name: bzImage-x86
        path: kernel/arch/x86/boot/bzImage

    - name: Upload vmlinux
      uses: actions/upload-artifact@v4
      with:
        name: vmlinux-x86
        path: kernel/vmlinux

    - name: Upload System.map
      uses: actions/upload-artifact@v4
      with:
        name: System.map-x86
        path: kernel/System.map

    - name: Upload kernel modules
      uses: actions/upload-artifact@v4
      with:
        name: kernel-modules
        path: kernel-modules.tar.gz
